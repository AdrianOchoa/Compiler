/* Generated By:JavaCC: Do not edit this line. LPBETokenManager.java */
package compiler;

import static compiler.LPBE.lista;

/**
 * Token Manager.
 */
public class LPBETokenManager implements LPBEConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x18000003ffffeL) != 0L) {
                    jjmatchedKind = 49;
                    return 7;
                }
                return -1;
            case 1:
                if ((active0 & 0x60L) != 0L) {
                    return 7;
                }
                if ((active0 & 0x18000003fff9eL) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 49;
                        jjmatchedPos = 1;
                    }
                    return 7;
                }
                return -1;
            case 2:
                if ((active0 & 0x18000003fffdaL) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 2;
                    return 7;
                }
                if ((active0 & 0x4L) != 0L) {
                    return 7;
                }
                return -1;
            case 3:
                if ((active0 & 0x18000003fbf9aL) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 3;
                    return 7;
                }
                if ((active0 & 0x4040L) != 0L) {
                    return 7;
                }
                return -1;
            case 4:
                if ((active0 & 0x8000002f9f9aL) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 4;
                    return 7;
                }
                if ((active0 & 0x1000000102000L) != 0L) {
                    return 7;
                }
                return -1;
            case 5:
                if ((active0 & 0x800000269c18L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 5;
                    return 7;
                }
                if ((active0 & 0x90382L) != 0L) {
                    return 7;
                }
                return -1;
            case 6:
                if ((active0 & 0x800000261818L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 6;
                    return 7;
                }
                if ((active0 & 0x8400L) != 0L) {
                    return 7;
                }
                return -1;
            case 7:
                if ((active0 & 0x800000000800L) != 0L) {
                    jjmatchedKind = 49;
                    jjmatchedPos = 7;
                    return 7;
                }
                if ((active0 & 0x261018L) != 0L) {
                    return 7;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                return jjMoveStringLiteralDfa1_0(0x10000000000L);
            case 37:
                jjmatchedKind = 27;
                return jjMoveStringLiteralDfa1_0(0x400000000L);
            case 38:
                return jjMoveStringLiteralDfa1_0(0x40000000000L);
            case 40:
                return jjStopAtPos(0, 50);
            case 41:
                return jjStopAtPos(0, 51);
            case 42:
                jjmatchedKind = 25;
                return jjMoveStringLiteralDfa1_0(0x100000000L);
            case 43:
                jjmatchedKind = 23;
                return jjMoveStringLiteralDfa1_0(0x50000000L);
            case 44:
                return jjStopAtPos(0, 57);
            case 45:
                jjmatchedKind = 24;
                return jjMoveStringLiteralDfa1_0(0xa0000000L);
            case 46:
                return jjStopAtPos(0, 56);
            case 47:
                jjmatchedKind = 26;
                return jjMoveStringLiteralDfa1_0(0x200000000L);
            case 58:
                return jjStopAtPos(0, 55);
            case 59:
                return jjStopAtPos(0, 54);
            case 60:
                jjmatchedKind = 38;
                return jjMoveStringLiteralDfa1_0(0x1000000000L);
            case 61:
                jjmatchedKind = 22;
                return jjMoveStringLiteralDfa1_0(0x800000000L);
            case 62:
                jjmatchedKind = 39;
                return jjMoveStringLiteralDfa1_0(0x2000000000L);
            case 66:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 67:
                return jjMoveStringLiteralDfa1_0(0xc0880L);
            case 68:
                return jjMoveStringLiteralDfa1_0(0x400L);
            case 69:
                return jjMoveStringLiteralDfa1_0(0x8L);
            case 70:
                return jjMoveStringLiteralDfa1_0(0x1000000028004L);
            case 72:
                return jjMoveStringLiteralDfa1_0(0x2000L);
            case 73:
                return jjMoveStringLiteralDfa1_0(0x12L);
            case 77:
                return jjMoveStringLiteralDfa1_0(0x1000L);
            case 78:
                return jjMoveStringLiteralDfa1_0(0x10000L);
            case 79:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 80:
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 82:
                return jjMoveStringLiteralDfa1_0(0x200L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x60L);
            case 86:
                return jjMoveStringLiteralDfa1_0(0x800000100000L);
            case 123:
                return jjStopAtPos(0, 52);
            case 124:
                return jjMoveStringLiteralDfa1_0(0x20000000000L);
            case 125:
                return jjStopAtPos(0, 53);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active0 & 0x40000000000L) != 0L) {
                    return jjStopAtPos(1, 42);
                }
                break;
            case 43:
                if ((active0 & 0x10000000L) != 0L) {
                    return jjStopAtPos(1, 28);
                }
                break;
            case 45:
                if ((active0 & 0x20000000L) != 0L) {
                    return jjStopAtPos(1, 29);
                }
                break;
            case 61:
                if ((active0 & 0x40000000L) != 0L) {
                    return jjStopAtPos(1, 30);
                } else if ((active0 & 0x80000000L) != 0L) {
                    return jjStopAtPos(1, 31);
                } else if ((active0 & 0x100000000L) != 0L) {
                    return jjStopAtPos(1, 32);
                } else if ((active0 & 0x200000000L) != 0L) {
                    return jjStopAtPos(1, 33);
                } else if ((active0 & 0x400000000L) != 0L) {
                    return jjStopAtPos(1, 34);
                } else if ((active0 & 0x800000000L) != 0L) {
                    return jjStopAtPos(1, 35);
                } else if ((active0 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(1, 36);
                } else if ((active0 & 0x2000000000L) != 0L) {
                    return jjStopAtPos(1, 37);
                } else if ((active0 & 0x10000000000L) != 0L) {
                    return jjStopAtPos(1, 40);
                }
                break;
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000001c6080L);
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000000400L);
            case 73:
                if ((active0 & 0x20L) != 0L) {
                    jjmatchedKind = 5;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x1044L);
            case 76:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
            case 77:
                return jjMoveStringLiteralDfa2_0(active0, 0x10L);
            case 78:
                return jjMoveStringLiteralDfa2_0(active0, 0x2L);
            case 79:
                return jjMoveStringLiteralDfa2_0(active0, 0x200a00L);
            case 80:
                return jjMoveStringLiteralDfa2_0(active0, 0x100L);
            case 83:
                return jjMoveStringLiteralDfa2_0(active0, 0x8L);
            case 85:
                return jjMoveStringLiteralDfa2_0(active0, 0x18000L);
            case 124:
                if ((active0 & 0x20000000000L) != 0L) {
                    return jjStopAtPos(1, 41);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa3_0(active0, 0x102108L);
            case 68:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
            case 69:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
            case 70:
                return jjMoveStringLiteralDfa3_0(active0, 0x400L);
            case 73:
                return jjMoveStringLiteralDfa3_0(active0, 0x2L);
            case 76:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
            case 77:
                return jjMoveStringLiteralDfa3_0(active0, 0x10280L);
            case 78:
                if ((active0 & 0x4L) != 0L) {
                    return jjStartNfaWithStates_0(2, 2, 7);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x8840L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0x220000L);
            case 80:
                return jjMoveStringLiteralDfa3_0(active0, 0x10L);
            case 82:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000044000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 65:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStartNfaWithStates_0(3, 14, 7);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
            case 66:
                return jjMoveStringLiteralDfa4_0(active0, 0x80L);
            case 67:
                return jjMoveStringLiteralDfa4_0(active0, 0x8002L);
            case 68:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
            case 69:
                return jjMoveStringLiteralDfa4_0(active0, 0x92400L);
            case 73:
                return jjMoveStringLiteralDfa4_0(active0, 0x100100L);
            case 76:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
            case 78:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
            case 79:
                if ((active0 & 0x40L) != 0L) {
                    return jjStartNfaWithStates_0(3, 6, 7);
                }
                break;
            case 80:
                return jjMoveStringLiteralDfa4_0(active0, 0x200L);
            case 82:
                return jjMoveStringLiteralDfa4_0(active0, 0x18L);
            case 83:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
            case 84:
                return jjMoveStringLiteralDfa4_0(active0, 0x20800L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(2, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000020000L);
            case 67:
                return jjMoveStringLiteralDfa5_0(active0, 0x40400L);
            case 69:
                return jjMoveStringLiteralDfa5_0(active0, 0x200200L);
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x889aL);
            case 78:
                return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
            case 79:
                if ((active0 & 0x100000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 20, 7);
                } else if ((active0 & 0x1000000000000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 48, 7);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x100L);
            case 82:
                if ((active0 & 0x2000L) != 0L) {
                    return jjStartNfaWithStates_0(4, 13, 7);
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
            case 84:
                return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(3, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 65:
                if ((active0 & 0x80000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 19, 7);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 66:
                return jjMoveStringLiteralDfa6_0(active0, 0x8L);
            case 68:
                return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
            case 77:
                return jjMoveStringLiteralDfa6_0(active0, 0x10L);
            case 78:
                if ((active0 & 0x100L) != 0L) {
                    return jjStartNfaWithStates_0(5, 8, 7);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x20800L);
            case 79:
                if ((active0 & 0x2L) != 0L) {
                    return jjStartNfaWithStates_0(5, 1, 7);
                } else if ((active0 & 0x80L) != 0L) {
                    return jjStartNfaWithStates_0(5, 7, 7);
                } else if ((active0 & 0x10000L) != 0L) {
                    return jjStartNfaWithStates_0(5, 16, 7);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
            case 82:
                if ((active0 & 0x200L) != 0L) {
                    return jjStartNfaWithStates_0(5, 9, 7);
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
            case 84:
                return jjMoveStringLiteralDfa6_0(active0, 0x40400L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(4, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
            case 69:
                return jjMoveStringLiteralDfa7_0(active0, 0x800000040000L);
            case 73:
                return jjMoveStringLiteralDfa7_0(active0, 0x18L);
            case 78:
                if ((active0 & 0x8000L) != 0L) {
                    return jjStartNfaWithStates_0(6, 15, 7);
                }
                return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
            case 79:
                if ((active0 & 0x400L) != 0L) {
                    return jjStartNfaWithStates_0(6, 10, 7);
                }
                break;
            case 84:
                return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
            case 85:
                return jjMoveStringLiteralDfa7_0(active0, 0x800L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(5, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa8_0(active0, 0x800L);
            case 69:
                if ((active0 & 0x20000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 17, 7);
                }
                break;
            case 79:
                if ((active0 & 0x200000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 21, 7);
                }
                break;
            case 82:
                if ((active0 & 0x8L) != 0L) {
                    return jjStartNfaWithStates_0(7, 3, 7);
                } else if ((active0 & 0x10L) != 0L) {
                    return jjStartNfaWithStates_0(7, 4, 7);
                } else if ((active0 & 0x40000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 18, 7);
                }
                return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
            case 83:
                if ((active0 & 0x1000L) != 0L) {
                    return jjStartNfaWithStates_0(7, 12, 7);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(6, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 79:
                if ((active0 & 0x800000000000L) != 0L) {
                    return jjStartNfaWithStates_0(8, 47, 7);
                }
                break;
            case 82:
                if ((active0 & 0x800L) != 0L) {
                    return jjStartNfaWithStates_0(8, 11, 7);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 13;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 43) {
                                    kind = 43;
                                }
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 39) {
                                jjstateSet[jjnewStateCnt++] = 4;
                            } else if (curChar == 34) {
                                jjCheckNAdd(1);
                            }
                            break;
                        case 1:
                            if ((0xffffffff00000000L & l) != 0L) {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            break;
                        case 2:
                            if (curChar == 34 && kind > 45) {
                                kind = 45;
                            }
                            break;
                        case 3:
                            if (curChar == 39) {
                                jjstateSet[jjnewStateCnt++] = 4;
                            }
                            break;
                        case 4:
                            if ((0x3ff000100000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 5:
                            if (curChar == 39 && kind > 46) {
                                kind = 46;
                            }
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                            jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 43) {
                                kind = 43;
                            }
                            jjCheckNAddStates(0, 2);
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 43) {
                                kind = 43;
                            }
                            jjCheckNAdd(9);
                            break;
                        case 10:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(10, 11);
                            }
                            break;
                        case 11:
                            if (curChar == 46) {
                                jjCheckNAdd(12);
                            }
                            break;
                        case 12:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 44) {
                                kind = 44;
                            }
                            jjCheckNAdd(12);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                            jjCheckNAdd(7);
                            break;
                        case 1:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                jjAddStates(3, 4);
                            }
                            break;
                        case 4:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 5;
                            }
                            break;
                        case 7:
                            if ((0x7fffffe87fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 49) {
                                kind = 49;
                            }
                            jjCheckNAdd(7);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = {
        9, 10, 11, 1, 2,};

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
        "", "\111\116\111\103\111\117", "\106\111\116",
        "\105\123\103\122\111\102\111\122", "\111\115\120\122\111\115\111\122", "\123\111", "\123\111\116\117",
        "\103\101\115\102\111\117", "\117\120\103\111\117\116", "\122\117\115\120\105\122",
        "\104\105\106\105\103\124\117", "\103\117\116\124\111\116\125\101\122", "\115\111\105\116\124\122\101\123",
        "\110\101\103\105\122", "\120\101\122\101", "\106\125\116\103\111\117\116",
        "\116\125\115\105\122\117", "\106\114\117\124\101\116\124\105", "\103\101\122\101\103\124\105\122",
        "\103\101\104\105\116\101", "\126\101\103\111\117", "\102\117\117\114\105\101\116\117", "\75", "\53",
        "\55", "\52", "\57", "\45", "\53\53", "\55\55", "\53\75", "\55\75", "\52\75",
        "\57\75", "\45\75", "\75\75", "\74\75", "\76\75", "\74", "\76", "\41\75", "\174\174",
        "\46\46", null, null, null, null, "\126\105\122\104\101\104\105\122\117",
        "\106\101\114\123\117", null, "\50", "\51", "\173", "\175", "\73", "\72", "\56", "\54", null, null,
        null, null,};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
        "DEFAULT",};
    static final long[] jjtoToken = {
        0x3ffffffffffffffL,};
    static final long[] jjtoSkip = {
        0x3c00000000000000L,};
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[13];
    private final int[] jjstateSet = new int[26];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected char curChar;

    /**
     * Constructor.
     */
    public LPBETokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public LPBETokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 13; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    TokenLexicalActions(matchedToken);
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 1:
                image.append(jjstrLiteralImages[1]);
                lengthOfMatch = jjstrLiteralImages[1].length();
                System.out.println("Palabra reservada (funcion principal) --> " + image);
                lista.add("Palabra reservada (funcion principal) --> " + image);
                break;
            case 2:
                image.append(jjstrLiteralImages[2]);
                lengthOfMatch = jjstrLiteralImages[2].length();
                System.out.println("Palabra reservada (fin de la funcion principal) --> " + image);
                lista.add("Palabra reservada (fin de la funcion principal) --> " + image);
                break;
            case 3:
                image.append(jjstrLiteralImages[3]);
                lengthOfMatch = jjstrLiteralImages[3].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 4:
                image.append(jjstrLiteralImages[4]);
                lengthOfMatch = jjstrLiteralImages[4].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 5:
                image.append(jjstrLiteralImages[5]);
                lengthOfMatch = jjstrLiteralImages[5].length();
                System.out.println("Palabra reservada (condicional) --> " + image);
                lista.add("Palabra reservada (condicional) --> " + image);
                break;
            case 6:
                image.append(jjstrLiteralImages[6]);
                lengthOfMatch = jjstrLiteralImages[6].length();
                System.out.println("Palabra reservada (condicional) --> " + image);
                lista.add("Palabra reservada (condicional) --> " + image);
                break;
            case 7:
                image.append(jjstrLiteralImages[7]);
                lengthOfMatch = jjstrLiteralImages[7].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 8:
                image.append(jjstrLiteralImages[8]);
                lengthOfMatch = jjstrLiteralImages[8].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 9:
                image.append(jjstrLiteralImages[9]);
                lengthOfMatch = jjstrLiteralImages[9].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 10:
                image.append(jjstrLiteralImages[10]);
                lengthOfMatch = jjstrLiteralImages[10].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 11:
                image.append(jjstrLiteralImages[11]);
                lengthOfMatch = jjstrLiteralImages[11].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 12:
                image.append(jjstrLiteralImages[12]);
                lengthOfMatch = jjstrLiteralImages[12].length();
                System.out.println("Palabra reservada (ciclo) --> " + image);
                lista.add("Palabra reservada (ciclo) --> " + image);
                break;
            case 13:
                image.append(jjstrLiteralImages[13]);
                lengthOfMatch = jjstrLiteralImages[13].length();
                System.out.println("Palabra reservada (ciclo) --> " + image);
                lista.add("Palabra reservada (ciclo) --> " + image);
                break;
            case 14:
                image.append(jjstrLiteralImages[14]);
                lengthOfMatch = jjstrLiteralImages[14].length();
                System.out.println("Palabra reservada (ciclo) --> " + image);
                lista.add("Palabra reservada (ciclo) --> " + image);
                break;
            case 15:
                image.append(jjstrLiteralImages[15]);
                lengthOfMatch = jjstrLiteralImages[15].length();
                System.out.println("Palabra reservada --> " + image);
                lista.add("Palabra reservada --> " + image);
                break;
            case 16:
                image.append(jjstrLiteralImages[16]);
                lengthOfMatch = jjstrLiteralImages[16].length();
                System.out.println("Tipo de dato --> " + image);
                lista.add("Tipo de dato --> " + image);
                break;
            case 17:
                image.append(jjstrLiteralImages[17]);
                lengthOfMatch = jjstrLiteralImages[17].length();
                System.out.println("Tipo de dato --> " + image);
                lista.add("Tipo de dato --> " + image);
                break;
            case 18:
                image.append(jjstrLiteralImages[18]);
                lengthOfMatch = jjstrLiteralImages[18].length();
                System.out.println("Tipo de dato --> " + image);
                lista.add("Tipo de dato --> " + image);
                break;
            case 19:
                image.append(jjstrLiteralImages[19]);
                lengthOfMatch = jjstrLiteralImages[19].length();
                System.out.println("Tipo de dato --> " + image);
                lista.add("Tipo de dato --> " + image);
                break;
            case 20:
                image.append(jjstrLiteralImages[20]);
                lengthOfMatch = jjstrLiteralImages[20].length();
                System.out.println("Tipo de dato --> " + image);
                lista.add("Tipo de dato --> " + image);
                break;
            case 21:
                image.append(jjstrLiteralImages[21]);
                lengthOfMatch = jjstrLiteralImages[21].length();
                System.out.println("Tipo de dato --> " + image);
                lista.add("Tipo de dato --> " + image);
                break;
            case 22:
                image.append(jjstrLiteralImages[22]);
                lengthOfMatch = jjstrLiteralImages[22].length();
                System.out.println("Asignacion --> " + image);
                lista.add("Asignacion --> " + image);
                break;
            case 23:
                image.append(jjstrLiteralImages[23]);
                lengthOfMatch = jjstrLiteralImages[23].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 24:
                image.append(jjstrLiteralImages[24]);
                lengthOfMatch = jjstrLiteralImages[24].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 25:
                image.append(jjstrLiteralImages[25]);
                lengthOfMatch = jjstrLiteralImages[25].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 26:
                image.append(jjstrLiteralImages[26]);
                lengthOfMatch = jjstrLiteralImages[26].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 27:
                image.append(jjstrLiteralImages[27]);
                lengthOfMatch = jjstrLiteralImages[27].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 28:
                image.append(jjstrLiteralImages[28]);
                lengthOfMatch = jjstrLiteralImages[28].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 29:
                image.append(jjstrLiteralImages[29]);
                lengthOfMatch = jjstrLiteralImages[29].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 30:
                image.append(jjstrLiteralImages[30]);
                lengthOfMatch = jjstrLiteralImages[30].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 31:
                image.append(jjstrLiteralImages[31]);
                lengthOfMatch = jjstrLiteralImages[31].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 32:
                image.append(jjstrLiteralImages[32]);
                lengthOfMatch = jjstrLiteralImages[32].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 33:
                image.append(jjstrLiteralImages[33]);
                lengthOfMatch = jjstrLiteralImages[33].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 34:
                image.append(jjstrLiteralImages[34]);
                lengthOfMatch = jjstrLiteralImages[34].length();
                System.out.println("Operador Aritmetico --> " + image);
                lista.add("Operador Aritmetico --> " + image);
                break;
            case 35:
                image.append(jjstrLiteralImages[35]);
                lengthOfMatch = jjstrLiteralImages[35].length();
                System.out.println("Operador para comparacion --> " + image);
                lista.add("Operador para comparacion --> " + image);
                break;
            case 36:
                image.append(jjstrLiteralImages[36]);
                lengthOfMatch = jjstrLiteralImages[36].length();
                System.out.println("Operador para comparacion --> " + image);
                lista.add("Operador para comparacion --> " + image);
                break;
            case 37:
                image.append(jjstrLiteralImages[37]);
                lengthOfMatch = jjstrLiteralImages[37].length();
                System.out.println("Operador para comparacion --> " + image);
                lista.add("Operador para comparacion --> " + image);
                break;
            case 38:
                image.append(jjstrLiteralImages[38]);
                lengthOfMatch = jjstrLiteralImages[38].length();
                System.out.println("Operador para comparacion --> " + image);
                lista.add("Operador para comparacion --> " + image);
                break;
            case 39:
                image.append(jjstrLiteralImages[39]);
                lengthOfMatch = jjstrLiteralImages[39].length();
                System.out.println("Operador para comparacion --> " + image);
                lista.add("Operador para comparacion --> " + image);
                break;
            case 40:
                image.append(jjstrLiteralImages[40]);
                lengthOfMatch = jjstrLiteralImages[40].length();
                System.out.println("Operador para comparacion --> " + image);
                lista.add("Operador para comparacion --> " + image);
                break;
            case 41:
                image.append(jjstrLiteralImages[41]);
                lengthOfMatch = jjstrLiteralImages[41].length();
                System.out.println("Operador logico --> " + image);
                lista.add("Operador logico --> " + image);
                break;
            case 42:
                image.append(jjstrLiteralImages[42]);
                lengthOfMatch = jjstrLiteralImages[42].length();
                System.out.println("Operador logico --> " + image);
                lista.add("Operador logico --> " + image);
                break;
            case 43:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Valor --> " + image);
                lista.add("Valor --> " + image);
                break;
            case 44:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Valor --> " + image);
                lista.add("Valor --> " + image);
                break;
            case 45:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Valor --> " + image);
                lista.add("Valor --> " + image);
                break;
            case 46:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Valor --> " + image);
                lista.add("Valor --> " + image);
                break;
            case 47:
                image.append(jjstrLiteralImages[47]);
                lengthOfMatch = jjstrLiteralImages[47].length();
                System.out.println("Valor --> " + image);
                lista.add("Valor --> " + image);
                break;
            case 48:
                image.append(jjstrLiteralImages[48]);
                lengthOfMatch = jjstrLiteralImages[48].length();
                System.out.println("Valor --> " + image);
                lista.add("Valor --> " + image);
                break;
            case 49:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("Identificador --> " + image);
                lista.add("Identificador --> " + image);
                break;
            case 50:
                image.append(jjstrLiteralImages[50]);
                lengthOfMatch = jjstrLiteralImages[50].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 51:
                image.append(jjstrLiteralImages[51]);
                lengthOfMatch = jjstrLiteralImages[51].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 52:
                image.append(jjstrLiteralImages[52]);
                lengthOfMatch = jjstrLiteralImages[52].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 53:
                image.append(jjstrLiteralImages[53]);
                lengthOfMatch = jjstrLiteralImages[53].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 54:
                image.append(jjstrLiteralImages[54]);
                lengthOfMatch = jjstrLiteralImages[54].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 55:
                image.append(jjstrLiteralImages[55]);
                lengthOfMatch = jjstrLiteralImages[55].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 56:
                image.append(jjstrLiteralImages[56]);
                lengthOfMatch = jjstrLiteralImages[56].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            case 57:
                image.append(jjstrLiteralImages[57]);
                lengthOfMatch = jjstrLiteralImages[57].length();
                System.out.println("Puntuacion --> " + image);
                lista.add("Puntuacion --> " + image);
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
